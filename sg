#!/usr/bin/gawk -f

# Wrapper for signal-cli, adding convenience and color
# Cam Webb <https://github.com/camwebb/signal-cli-wrapper>
# License: GNU GPLv3. See LICENSE file.

# Installation: 1) make this script executable
#               2) make sure hashbang points to gawk
#               3) script and signal-cli must be in $PATH
#               4) set config file:
@include "/home/cam/.local/share/signal-cli/scw_config.awk"

BEGIN{

  # Setup
  config()

  # logfile
  LOG = SCLI "data/" MYNUM ".d/msgs"
  
  # read number of old log lines read
  getline OLDLINES < SCLI "data/" MYNUM ".d/.oldlines"

  # logfile date format
  DATE = strftime("%s000 (%Y-%m-%dT%H:%M:00.000Z)")

  # inverse numbers (TODO add error check for duplicates)
  for (i in NUM) {
    iNUM[NUM[i]] = i
  }

  USAGE = "  Usage: sg [ ids | snd NAME \"message\" | rcv | cnv NAME | " \
    "log | new | ckn NUM ]"

  
  # get the registered numbers
  if (ARGV[1] == "ids") {
    cmd = "signal-cli -u " MYNUM " listIdentities"
    while ((cmd | getline) > 0) {
      if (iNUM[gensub(/:$/,"","G",$1)])
        list[iNUM[gensub(/:$/,"","G",$1)]]++
      else
        list[gensub(/:$/,"","G",$1)]++
    }
    PROCINFO["sorted_in"] = "@ind_str_asc"
    for (i in list)
      print "  " i "  (" list[i] " num)"
  }

  # get the latest messages and write to stdout and to logfile
  else if (ARGV[1] == "rcv") {
    cmd = "signal-cli -u " MYNUM " receive | tee -a " LOG
    system(cmd)
  }
  
  # read the logfile, substituting names for numbers
  else if (ARGV[1] == "log") {
    "mktemp" | getline TMPLOG
    while (( getline < LOG ) > 0) {
      for (i in iNUM)
        gsub(gensub(/\+/,"\\\\+","G",i),("** " iNUM[i] " **"),$0)
      print $0 >> TMPLOG
    }
    system("less +G " TMPLOG)
  }
  
  # Send a message to <name> and write to logfile
  else if ((ARGV[1] == "snd") &&                \
           (ARGC == 4) &&                       \
           (NUM[ARGV[2]])) {
    # (as long as the right # of arguments)
    
    # OPT add a check:
    #   read -p "Sending to * $2 *. Sure? (respond y) " SURE
    #   if [ $SURE = "Y" -o $SURE = "y" ]

    err = system("signal-cli -u " MYNUM " send " NUM[ARGV[2]] \
                 " -m '" ARGV[3] "'")
    if (err) {
      print "sending failed!" > "/dev/stderr"
      exit 1
    }
    
    print "Sent to: " NUM[ARGV[2]] "\nTimestamp: " DATE "\nBody: "  \
      ARGV[3] "\n" >> LOG
    
  }
  
  # Create a conversation from the logfile
  else if ((ARGV[1] == "cnv") &&                \
           (NUM[ARGV[2]])) {

    # (for colors: https://en.wikipedia.org/wiki/ANSI_escape_code )
    # With upgrade to signal-cli 0.6.5, logged rcv Body = $6, Sender = $4
    
    RS=""
    FS="\n"
    Width = 55
    name = ARGV[2]

    while (( getline < LOG ) > 0) {
      for (i in iNUM)
        gsub(gensub(/\+/,"\\+","G",i),(iNUM[i]),$0)

      # for each log entry, is it a sent to person?
      if ($1 ~ ("Sent to: " name)) 
        line(substr($3,7), (sprintf("%*s", length(name), " ") "<< "),   \
             "10", substr($2,12,10))
      # sent from person?
      else if (($4 ~ ("Sender: " name)) && ($6 ~ /^Body/) && \
               ($7 !~ /^Group/))
        line(substr($6,7), (name " : "), "11", substr($2,12,10))
      # sent to group?
      else if ($1 ~ ("Group sent to: " name))
        line(substr($3,7), (sprintf("%*s", length(name), " ") "<< "),   \
             "10", substr($2,12,10))
      # sent from group friend
      else if (($4 ~ ("Sender:")) && ($6 ~ /^Body/) && ($8 ~ name))
        line(substr($6,7), (gensub(/ \(dev.*/,"","G", substr($4,8)) " : "), \
             "11", substr($2,12,10))
    }
  }

# # New messages
# elif [ $1 == "new" ]
# then
#     echo
#     # cat "$LOG" | \
#     tail -n +"$OLDLINES" "$LOG" | \
#         gawk 'BEGIN{RS="" ; FS="\n"}
#           $1 ~ /^Envelope from/ && $6 ~ /^Body/ {split($4,n," ");
#             print  strftime("[%Y-%m-%d %H:%M] ",substr($2,12,10)) \
#               n[2] ": " substr($6,7,20) "..." } \
#           $1 ~ /^Envelope from/ && $3 ~ /^Got/ {split($1,n," ");
#             print  strftime("[%Y-%m-%d %H:%M] ",substr($2,12,10)) \
#               n[3] "[on device]" } \
#           $1 ~ /^Envelope from/ && $7 ~ /read receipt/ {split($4,n," ");
#             print  strftime("[%Y-%m-%d %H:%M] ",substr($2,12,10)) \
#               n[2] "[read]" } \
#            ' | eval "$SEDSTR" | sed -E 's/\([^)]+\)//g'
#     # echo
#     wc "$LOG" | gawk '{print $1}' > \
#        ~/.local/share/signal-cli/data/${MYNUM}.d/.oldlines

  # Test for user
  else if ((ARGV[1] == "ckn") &&                \
           (ARGV[2] ~ /\+[0-9]+/)) {
    print "Testing for a Signal user at " ARGV[2]
    err = system("signal-cli -u " MYNUM " send " ARGV[2]                \
                 " -m 'Testing if you use Signal' &> /dev/null")
    if (err)
      print "... User does not have a Signal account"
    else
      print "... User has a Signal account (Message sent was "\
        "'Testing if you use Signal')"
  }

  else if (ARGV[1] == "gls") {
    cmd = "signal-cli -u " MYNUM " listGroups -d"
    while ((cmd | getline) > 0) {
      for (i in iNUM)
        gsub(gensub(/\+/,"\\\\+","G",i),("{" iNUM[i] "}"),$0)
      print $0
    }
  }

  # Leave group
  else if ((ARGV[1] == "glv") && \
           (NUM[ARGV[2]])) {
    err = system("signal-cli -u " MYNUM " quitGroup -g '" NUM[ARGV[2]] "'")
    if (err)
      print "... Error. Could not leave group."
    else
      print "... Left group"
  }

  # New group
  else if ((ARGV[1] == "gnu") &&                \
           (ARGC == 3)) {
    err = system("signal-cli -u " MYNUM " updateGroup -n '" ARGV[2] "'")
    if (err)
      print "... Error. Could not create group."
    else
      print "... Group created"
  }

  # Add a person to group
  else if ((ARGV[1] == "gad") &&                \
           (NUM[ARGV[2]])     &&                \
           (NUM[ARGV[3]])) {
    err = system("signal-cli -u " MYNUM " updateGroup -g '" ARGV[2] "' -m " \
                 NUM[ARGV[3]])
    if (err)
      print "... Error. Could not add member"
  }

  # Send a message to <group> and write to logfile
  else if ((ARGV[1] == "gsn") &&                \
           (ARGC == 4) &&                       \
           (NUM[ARGV[2]])) {
    # (as long as the right # of arguments)
    
    err = system("signal-cli -u " MYNUM " send -g " NUM[ARGV[2]] \
                 " -m '" ARGV[3] "'")
    if (err) {
      print "sending failed!" > "/dev/stderr"
      exit 1
    }
    
    print "Group sent to: " NUM[ARGV[2]] "\nTimestamp: " DATE "\nBody: "  \
      ARGV[3] "\n" >> LOG
  }

  # If no arguments, or other fail
  else {
    print USAGE
    exit 1
  }

  exit 0
}

# TODO add trust: signal-cli -u +19073858530 trust -v "50467 94008 71129 72250 81900 09933 84705 05201 02263 18919 28291 21194" +628972382695

function line(msg, l1, col, ts,      lines, i,dash,ec,bc) {
  # arguments: message, message prefix, color, timestamp

  lines = int((length(msg)-1) / Width) + 1
  # create the dash, if needed
  ec = substr(msg,Width,1)
  bc = substr(msg,Width+1,1)
  dash = (ec && (ec!=" ") && bc && (bc!=" ")) ? "-" : ""

  # print the first line, preceded by date and name
  print "\x1b[38;5;8m" strftime("[%m-%d %a] ",ts) "\x1b[38;5;"    \
    col "m" l1 substr(msg,1,Width) dash
  
  for (i = 2; i <= lines; i++) {
    # print other lines
    ec = substr(msg,(i*Width),1)
    bc=substr(msg,(i*Width)+1,1)
    dash = (ec && (ec!=" ") && bc && (bc!=" ")) ? "-" : ""
    print sprintf("%*s", length(l1)+12, " ")                         \
      gensub(/^ */,"","G",substr(msg,((i-1)*Width)+1,Width)) dash
  }
  # print color reset:
  printf "\x1b[0;m"
}
